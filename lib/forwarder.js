"use strict";
/*
 * Unless explicitly stated otherwise all files in this repository are licensed
 * under the Apache License Version 2.0.
 *
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2021 Datadog, Inc.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.addForwarder = void 0;
const crypto = require("crypto");
const lambda = require("@aws-cdk/aws-lambda");
const aws_logs_1 = require("@aws-cdk/aws-logs");
const aws_logs_destinations_1 = require("@aws-cdk/aws-logs-destinations");
const cdk = require("@aws-cdk/core");
const loglevel_1 = require("loglevel");
const SUBSCRIPTION_FILTER_PREFIX = "DatadogSubscriptionFilter";
function generateForwaderConstructId(forwarderArn) {
    loglevel_1.default.debug("Generating construct Id for Datadog Lambda Forwarder");
    return "forwarder" + crypto.createHash("sha256").update(forwarderArn).digest("hex");
}
function generateSubscriptionFilterName(functionUniqueId, forwarderArn) {
    const subscriptionFilterValue = crypto
        .createHash("sha256")
        .update(functionUniqueId)
        .update(forwarderArn)
        .digest("hex");
    const subscriptionFilterValueLength = subscriptionFilterValue.length;
    const subscriptionFilterName = SUBSCRIPTION_FILTER_PREFIX +
        subscriptionFilterValue.substring(subscriptionFilterValueLength - 8, subscriptionFilterValueLength);
    return subscriptionFilterName;
}
function addForwarder(scope, lambdaFunctions, forwarderArn) {
    const forwarderConstructId = generateForwaderConstructId(forwarderArn);
    let forwarder;
    if (scope.node.tryFindChild(forwarderConstructId)) {
        forwarder = scope.node.tryFindChild(forwarderConstructId);
    }
    else {
        forwarder = lambda.Function.fromFunctionArn(scope, forwarderConstructId, forwarderArn);
    }
    const forwarderDestination = new aws_logs_destinations_1.LambdaDestination(forwarder);
    lambdaFunctions.forEach((lam) => {
        const subscriptionFilterName = generateSubscriptionFilterName(cdk.Names.uniqueId(lam), forwarderArn);
        loglevel_1.default.debug(`Adding log subscription ${subscriptionFilterName} for ${lam.functionName}`);
        lam.logGroup.addSubscriptionFilter(subscriptionFilterName, {
            destination: forwarderDestination,
            filterPattern: aws_logs_1.FilterPattern.allEvents(),
        });
    });
}
exports.addForwarder = addForwarder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9yd2FyZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2ZvcndhcmRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7OztHQU1HOzs7QUFFSCxpQ0FBaUM7QUFDakMsOENBQThDO0FBQzlDLGdEQUFrRDtBQUNsRCwwRUFBbUU7QUFDbkUscUNBQXFDO0FBQ3JDLHVDQUEyQjtBQUMzQixNQUFNLDBCQUEwQixHQUFHLDJCQUEyQixDQUFDO0FBRS9ELFNBQVMsMkJBQTJCLENBQUMsWUFBb0I7SUFDdkQsa0JBQUcsQ0FBQyxLQUFLLENBQUMsc0RBQXNELENBQUMsQ0FBQztJQUNsRSxPQUFPLFdBQVcsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdEYsQ0FBQztBQUNELFNBQVMsOEJBQThCLENBQUMsZ0JBQXdCLEVBQUUsWUFBb0I7SUFDcEYsTUFBTSx1QkFBdUIsR0FBVyxNQUFNO1NBQzNDLFVBQVUsQ0FBQyxRQUFRLENBQUM7U0FDcEIsTUFBTSxDQUFDLGdCQUFnQixDQUFDO1NBQ3hCLE1BQU0sQ0FBQyxZQUFZLENBQUM7U0FDcEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pCLE1BQU0sNkJBQTZCLEdBQUcsdUJBQXVCLENBQUMsTUFBTSxDQUFDO0lBQ3JFLE1BQU0sc0JBQXNCLEdBQzFCLDBCQUEwQjtRQUMxQix1QkFBdUIsQ0FBQyxTQUFTLENBQUMsNkJBQTZCLEdBQUcsQ0FBQyxFQUFFLDZCQUE2QixDQUFDLENBQUM7SUFFdEcsT0FBTyxzQkFBc0IsQ0FBQztBQUNoQyxDQUFDO0FBRUQsU0FBZ0IsWUFBWSxDQUFDLEtBQW9CLEVBQUUsZUFBa0MsRUFBRSxZQUFvQjtJQUN6RyxNQUFNLG9CQUFvQixHQUFHLDJCQUEyQixDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3ZFLElBQUksU0FBUyxDQUFDO0lBQ2QsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFO1FBQ2pELFNBQVMsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxvQkFBb0IsQ0FBcUIsQ0FBQztLQUMvRTtTQUFNO1FBQ0wsU0FBUyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxvQkFBb0IsRUFBRSxZQUFZLENBQUMsQ0FBQztLQUN4RjtJQUNELE1BQU0sb0JBQW9CLEdBQUcsSUFBSSx5Q0FBaUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM5RCxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7UUFDOUIsTUFBTSxzQkFBc0IsR0FBRyw4QkFBOEIsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUNyRyxrQkFBRyxDQUFDLEtBQUssQ0FBQywyQkFBMkIsc0JBQXNCLFFBQVEsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7UUFDdkYsR0FBRyxDQUFDLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQyxzQkFBc0IsRUFBRTtZQUN6RCxXQUFXLEVBQUUsb0JBQW9CO1lBQ2pDLGFBQWEsRUFBRSx3QkFBYSxDQUFDLFNBQVMsRUFBRTtTQUN6QyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFqQkQsb0NBaUJDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFVubGVzcyBleHBsaWNpdGx5IHN0YXRlZCBvdGhlcndpc2UgYWxsIGZpbGVzIGluIHRoaXMgcmVwb3NpdG9yeSBhcmUgbGljZW5zZWRcbiAqIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSBWZXJzaW9uIDIuMC5cbiAqXG4gKiBUaGlzIHByb2R1Y3QgaW5jbHVkZXMgc29mdHdhcmUgZGV2ZWxvcGVkIGF0IERhdGFkb2cgKGh0dHBzOi8vd3d3LmRhdGFkb2docS5jb20vKS5cbiAqIENvcHlyaWdodCAyMDIxIERhdGFkb2csIEluYy5cbiAqL1xuXG5pbXBvcnQgKiBhcyBjcnlwdG8gZnJvbSBcImNyeXB0b1wiO1xuaW1wb3J0ICogYXMgbGFtYmRhIGZyb20gXCJAYXdzLWNkay9hd3MtbGFtYmRhXCI7XG5pbXBvcnQgeyBGaWx0ZXJQYXR0ZXJuIH0gZnJvbSBcIkBhd3MtY2RrL2F3cy1sb2dzXCI7XG5pbXBvcnQgeyBMYW1iZGFEZXN0aW5hdGlvbiB9IGZyb20gXCJAYXdzLWNkay9hd3MtbG9ncy1kZXN0aW5hdGlvbnNcIjtcbmltcG9ydCAqIGFzIGNkayBmcm9tIFwiQGF3cy1jZGsvY29yZVwiO1xuaW1wb3J0IGxvZyBmcm9tIFwibG9nbGV2ZWxcIjtcbmNvbnN0IFNVQlNDUklQVElPTl9GSUxURVJfUFJFRklYID0gXCJEYXRhZG9nU3Vic2NyaXB0aW9uRmlsdGVyXCI7XG5cbmZ1bmN0aW9uIGdlbmVyYXRlRm9yd2FkZXJDb25zdHJ1Y3RJZChmb3J3YXJkZXJBcm46IHN0cmluZykge1xuICBsb2cuZGVidWcoXCJHZW5lcmF0aW5nIGNvbnN0cnVjdCBJZCBmb3IgRGF0YWRvZyBMYW1iZGEgRm9yd2FyZGVyXCIpO1xuICByZXR1cm4gXCJmb3J3YXJkZXJcIiArIGNyeXB0by5jcmVhdGVIYXNoKFwic2hhMjU2XCIpLnVwZGF0ZShmb3J3YXJkZXJBcm4pLmRpZ2VzdChcImhleFwiKTtcbn1cbmZ1bmN0aW9uIGdlbmVyYXRlU3Vic2NyaXB0aW9uRmlsdGVyTmFtZShmdW5jdGlvblVuaXF1ZUlkOiBzdHJpbmcsIGZvcndhcmRlckFybjogc3RyaW5nKSB7XG4gIGNvbnN0IHN1YnNjcmlwdGlvbkZpbHRlclZhbHVlOiBzdHJpbmcgPSBjcnlwdG9cbiAgICAuY3JlYXRlSGFzaChcInNoYTI1NlwiKVxuICAgIC51cGRhdGUoZnVuY3Rpb25VbmlxdWVJZClcbiAgICAudXBkYXRlKGZvcndhcmRlckFybilcbiAgICAuZGlnZXN0KFwiaGV4XCIpO1xuICBjb25zdCBzdWJzY3JpcHRpb25GaWx0ZXJWYWx1ZUxlbmd0aCA9IHN1YnNjcmlwdGlvbkZpbHRlclZhbHVlLmxlbmd0aDtcbiAgY29uc3Qgc3Vic2NyaXB0aW9uRmlsdGVyTmFtZSA9XG4gICAgU1VCU0NSSVBUSU9OX0ZJTFRFUl9QUkVGSVggK1xuICAgIHN1YnNjcmlwdGlvbkZpbHRlclZhbHVlLnN1YnN0cmluZyhzdWJzY3JpcHRpb25GaWx0ZXJWYWx1ZUxlbmd0aCAtIDgsIHN1YnNjcmlwdGlvbkZpbHRlclZhbHVlTGVuZ3RoKTtcblxuICByZXR1cm4gc3Vic2NyaXB0aW9uRmlsdGVyTmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZEZvcndhcmRlcihzY29wZTogY2RrLkNvbnN0cnVjdCwgbGFtYmRhRnVuY3Rpb25zOiBsYW1iZGEuRnVuY3Rpb25bXSwgZm9yd2FyZGVyQXJuOiBzdHJpbmcpIHtcbiAgY29uc3QgZm9yd2FyZGVyQ29uc3RydWN0SWQgPSBnZW5lcmF0ZUZvcndhZGVyQ29uc3RydWN0SWQoZm9yd2FyZGVyQXJuKTtcbiAgbGV0IGZvcndhcmRlcjtcbiAgaWYgKHNjb3BlLm5vZGUudHJ5RmluZENoaWxkKGZvcndhcmRlckNvbnN0cnVjdElkKSkge1xuICAgIGZvcndhcmRlciA9IHNjb3BlLm5vZGUudHJ5RmluZENoaWxkKGZvcndhcmRlckNvbnN0cnVjdElkKSBhcyBsYW1iZGEuSUZ1bmN0aW9uO1xuICB9IGVsc2Uge1xuICAgIGZvcndhcmRlciA9IGxhbWJkYS5GdW5jdGlvbi5mcm9tRnVuY3Rpb25Bcm4oc2NvcGUsIGZvcndhcmRlckNvbnN0cnVjdElkLCBmb3J3YXJkZXJBcm4pO1xuICB9XG4gIGNvbnN0IGZvcndhcmRlckRlc3RpbmF0aW9uID0gbmV3IExhbWJkYURlc3RpbmF0aW9uKGZvcndhcmRlcik7XG4gIGxhbWJkYUZ1bmN0aW9ucy5mb3JFYWNoKChsYW0pID0+IHtcbiAgICBjb25zdCBzdWJzY3JpcHRpb25GaWx0ZXJOYW1lID0gZ2VuZXJhdGVTdWJzY3JpcHRpb25GaWx0ZXJOYW1lKGNkay5OYW1lcy51bmlxdWVJZChsYW0pLCBmb3J3YXJkZXJBcm4pO1xuICAgIGxvZy5kZWJ1ZyhgQWRkaW5nIGxvZyBzdWJzY3JpcHRpb24gJHtzdWJzY3JpcHRpb25GaWx0ZXJOYW1lfSBmb3IgJHtsYW0uZnVuY3Rpb25OYW1lfWApO1xuICAgIGxhbS5sb2dHcm91cC5hZGRTdWJzY3JpcHRpb25GaWx0ZXIoc3Vic2NyaXB0aW9uRmlsdGVyTmFtZSwge1xuICAgICAgZGVzdGluYXRpb246IGZvcndhcmRlckRlc3RpbmF0aW9uLFxuICAgICAgZmlsdGVyUGF0dGVybjogRmlsdGVyUGF0dGVybi5hbGxFdmVudHMoKSxcbiAgICB9KTtcbiAgfSk7XG59XG4iXX0=